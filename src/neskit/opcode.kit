// import neskit.addressing;

// // http://www.obelisk.demon.co.uk/6502/reference.html
// enum OpCode
// {
//     ORA = 0x01;        // logical OR
//     AND = 0x02;        // logical AND
//     EOR = 0x03;        // exclusive or
//     ADC = 0x04;        // add with carry
//     STA = 0x05;        // store accumulator
//     LDA = 0x06;        // load accumulator
//     CMP = 0x07;        // compare
//     SBC = 0x08;        // subtract with carry
//     ASL = 0x09;        // arithmetic shift left
//     ROL = 0x10;        // rotate left
//     LSR = 0x11;        // logical shift right
//     ROR = 0x12;        // rotate right
//     STX = 0x13;        // store X
//     LDX = 0x14;        // load X
//     DEC = 0x15;        // decrement memory
//     INC = 0x16;        // increment memory
//     BIT = 0x17;        // bit test
//     JMP = 0x18;        // jump
//     STY = 0x19;        // store Y
//     LDY = 0x20;        // load Y
//     CPY = 0x21;        // compare Y
//     CPX = 0x22;        // compare X
//     BCC = 0x23;        // branch if carry clear
//     BCS = 0x24;        // branch if carry set
//     BEQ = 0x25;        // branch if equal
//     BMI = 0x26;        // branch if minus
//     BNE = 0x27;        // branch if not equal
//     BPL = 0x28;        // branch if positive
//     BVC = 0x29;        // branch if overflow clear
//     BVS = 0x30;        // branch if overflow set
//     BRK = 0x31;        // force interrupt
//     CLC = 0x32;        // clear carry flag
//     CLD = 0x33;        // clear decimal mode
//     CLI = 0x34;        // clear interrupt disable
//     CLV = 0x35;        // clear overflow flag
//     DEX = 0x36;        // decrement X register
//     DEY = 0x37;        // decrement Y register
//     INX = 0x38;        // increment X register
//     INY = 0x39;        // increment Y register
//     JSR = 0x40;        // jump to subroutine
//     NOP = 0x41;        // no operation
//     IGN1 = 0x42;        // nop +1
//     IGN2 = 0x43;        // nop +2
//     PHA = 0x44;        // push accumulator
//     PHP = 0x45;        // push processor status
//     PLA = 0x46;        // pull accumulator
//     PLP = 0x47;        // pull processor status
//     RTI = 0x48;        // return from interrupt
//     RTS = 0x49;        // return from subroutine
//     SEC = 0x50;        // set carry flag
//     SED = 0x51;        // set decimal flag
//     SEI = 0x52;        // set interrupt disabled
//     TAX = 0x53;        // transfer accumulator to X
//     TAY = 0x54;        // transfer accumulator to Y
//     TSX = 0x55;        // transfer stack pointer to X
//     TSY = 0x56;        // transfer stack pointer to Y
//     TYA = 0x57;        // transfer Y to accumulator
//     TXS = 0x58;        // transfer X to stack pointer
//     TXA = 0x59;        // transfer X to stack pointer

//     // unofficial

//     LAX = 0x60;        // load both accumulator and X
//     SAX = 0x61;        // AND, CMP and store
//     RLA = 0x62;        // ROL then AND
//     RRA = 0x63;        // ROR then ADC
//     SLO = 0x64;        // ASL then ORA
//     SRE = 0x65;        // LSR then EOR
//     DCP = 0x66;        // DEC then COMP
//     ISC = 0x67;        // INC then SBC
//     ALR = 0x68;        // AND then LSR
//     ANC = 0x69;        // AND, copy N to C
//     ARR = 0x70;        // AND then ROR
//     AXS = 0x71;        // set X to (acc AND X) - (value w/o borrow)
//     SHY = 0x72;

//     Unknown = 0;

//     static var _codes: CArray[OpCode, 0x100] = empty;
//     static var _modes: CArray[AddressingMode, 0x100] = empty;
//     static var _ticks: CArray[Uint8, 0x100] = empty;

//     public static function getCode(byte: Uint8): OpCode {
//         return Self._codes[byte];
//     }
//     public static function getAddressingMode(byte: Uint8) {
//         return Self._modes[byte];
//     }
//     public static function getTicks(byte: Uint8): Size {
//         return Self._ticks[byte];
//     }

//     public static function decodeBytes(): Bool
//     {
//         for byte in 0 ... 0x100
//         {
//             var code: OpCode = Unknown;
//             var mode: AddressingMode = Absolute;
//             var ticks: Size = 2;

//             if byte == 0x00 { code=BRK; ticks=7; }
//             else if byte == 0x01 { code=ORA; mode=IndirectX; ticks=6; }
//             else if byte == 0x05 { code=ORA; mode=ZeroPage; ticks=3; }
//             else if byte == 0x06 { code=ASL; mode=ZeroPage; ticks=5; }
//             else if byte == 0x08 { code=PHP; ticks=3; }
//             else if byte == 0x09 { code=ORA; mode=Immediate; }
//             else if byte == 0x0A { code=ASL; mode=Accumulator; }
//             else if byte == 0x0D { code=ORA; ticks=4; }
//             else if byte == 0x0E { code=ASL; ticks=6; }
//             else if byte == 0x10 { code=BPL; mode=Relative; }
//             else if byte == 0x11 { code=ORA; mode=IndirectY; ticks=5; }
//             else if byte == 0x15 { code=ORA; mode=ZeroPageX; ticks=4; }
//             else if byte == 0x16 { code=ASL; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x18 { code=CLC; }
//             else if byte == 0x19 { code=ORA; mode=AbsoluteY; ticks=4; }
//             else if byte == 0x1D { code=ORA; mode=AbsoluteX; ticks=4; }
//             else if byte == 0x1E { code=ASL; mode=AbsoluteX; ticks=7; }
//             else if byte == 0x20 { code=JSR; ticks=6; }
//             else if byte == 0x21 { code=AND; mode=IndirectX; ticks=6; }
//             else if byte == 0x24 { code=BIT; mode=ZeroPage; ticks=3; }
//             else if byte == 0x25 { code=AND; mode=ZeroPage; ticks=3; }
//             else if byte == 0x26 { code=ROL; mode=ZeroPage; ticks=5; }
//             else if byte == 0x28 { code=PLP; ticks=4; }
//             else if byte == 0x29 { code=AND; mode=Immediate; }
//             else if byte == 0x2A { code=ROL; mode=Accumulator; }
//             else if byte == 0x2C { code=BIT; ticks=4; }
//             else if byte == 0x2D { code=AND; ticks=4; }
//             else if byte == 0x2E { code=ROL; ticks=6; }
//             else if byte == 0x30 { code=BMI; mode=Relative; }
//             else if byte == 0x31 { code=AND; mode=IndirectY; ticks=5; }
//             else if byte == 0x35 { code=AND; mode=ZeroPageX; ticks=4; }
//             else if byte == 0x36 { code=ROL; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x38 { code=SEC; }
//             else if byte == 0x39 { code=AND; mode=AbsoluteY; ticks=4; }
//             else if byte == 0x3D { code=AND; mode=AbsoluteX; ticks=4; }
//             else if byte == 0x3E { code=ROL; mode=AbsoluteX; ticks=7; }
//             else if byte == 0x40 { code=RTI; ticks=6; }
//             else if byte == 0x41 { code=EOR; mode=IndirectX; ticks=6; }
//             else if byte == 0x45 { code=EOR; mode=ZeroPage; ticks=3; }
//             else if byte == 0x46 { code=LSR; mode=ZeroPage; ticks=5; }
//             else if byte == 0x48 { code=PHA; ticks=3; }
//             else if byte == 0x49 { code=EOR; mode=Immediate; }
//             else if byte == 0x4A { code=LSR; mode=Accumulator; }
//             else if byte == 0x4C { code=JMP; ticks=3; }
//             else if byte == 0x4D { code=EOR; ticks=4; }
//             else if byte == 0x4E { code=LSR; ticks=6; }
//             else if byte == 0x50 { code=BVC; mode=Relative; }
//             else if byte == 0x51 { code=EOR; mode=IndirectY; ticks=5; }
//             else if byte == 0x55 { code=EOR; mode=ZeroPageX; ticks=4; }
//             else if byte == 0x56 { code=LSR; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x58 { code=CLI; }
//             else if byte == 0x59 { code=EOR; mode=AbsoluteY; ticks=4; }
//             else if byte == 0x5D { code=EOR; mode=AbsoluteX; ticks=4; }
//             else if byte == 0x5E { code=LSR; mode=AbsoluteX; ticks=7; }
//             else if byte == 0x60 { code=RTS; ticks=6; }
//             else if byte == 0x61 { code=ADC; mode=IndirectX; ticks=6; }
//             else if byte == 0x65 { code=ADC; mode=ZeroPage; ticks=3; }
//             else if byte == 0x66 { code=ROR; mode=ZeroPage; ticks=5; }
//             else if byte == 0x68 { code=PLA; ticks=4; }
//             else if byte == 0x69 { code=ADC; mode=Immediate; }
//             else if byte == 0x6A { code=ROR; mode=Accumulator; }
//             else if byte == 0x6C { code=JMP; mode=Indirect; ticks=5; }
//             else if byte == 0x6D { code=ADC; ticks=4; }
//             else if byte == 0x6E { code=ROR; ticks=6; }
//             else if byte == 0x70 { code=BVS; mode=Relative; }
//             else if byte == 0x71 { code=ADC; mode=IndirectY; ticks=5; }
//             else if byte == 0x75 { code=ADC; mode=ZeroPageX; ticks=4; }
//             else if byte == 0x76 { code=ROR; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x78 { code=SEI; }
//             else if byte == 0x79 { code=ADC; mode=AbsoluteY; ticks=4; }
//             else if byte == 0x7D { code=ADC; mode=AbsoluteX; ticks=4; }
//             else if byte == 0x7E { code=ROR; mode=AbsoluteX; ticks=7; }
//             else if byte == 0x81 { code=STA; mode=IndirectX; ticks=6; }
//             else if byte == 0x84 { code=STY; mode=ZeroPage; ticks=3; }
//             else if byte == 0x85 { code=STA; mode=ZeroPage; ticks=3; }
//             else if byte == 0x86 { code=STX; mode=ZeroPage; ticks=3; }
//             else if byte == 0x88 { code=DEY; }
//             else if byte == 0x8A { code=TXA; }
//             else if byte == 0x8C { code=STY; ticks=4; }
//             else if byte == 0x8D { code=STA; ticks=4; }
//             else if byte == 0x8E { code=STX; ticks=4; }
//             else if byte == 0x90 { code=BCC; mode=Relative; }
//             else if byte == 0x91 { code=STA; mode=IndirectY; ticks=6; }
//             else if byte == 0x94 { code=STY; mode=ZeroPageX; ticks=4; }
//             else if byte == 0x95 { code=STA; mode=ZeroPageX; ticks=4; }
//             else if byte == 0x96 { code=STX; mode=ZeroPageY; ticks=4; }
//             else if byte == 0x98 { code=TYA; }
//             else if byte == 0x99 { code=STA; mode=AbsoluteY; ticks=5; }
//             else if byte == 0x9A { code=TXS; }
//             else if byte == 0x9D { code=STA; mode=AbsoluteX; ticks=5; }
//             else if byte == 0xA0 { code=LDY; mode=Immediate; }
//             else if byte == 0xA1 { code=LDA; mode=IndirectX; ticks=6; }
//             else if byte == 0xA2 { code=LDX; mode=Immediate; }
//             else if byte == 0xA4 { code=LDY; mode=ZeroPage; ticks=3; }
//             else if byte == 0xA5 { code=LDA; mode=ZeroPage; ticks=3; }
//             else if byte == 0xA6 { code=LDX; mode=ZeroPage; ticks=3; }
//             else if byte == 0xA8 { code=TAY; }
//             else if byte == 0xA9 { code=LDA; mode=Immediate; }
//             else if byte == 0xAA { code=TAX; }
//             else if byte == 0xAC { code=LDY; ticks=4; }
//             else if byte == 0xAD { code=LDA; ticks=4; }
//             else if byte == 0xAE { code=LDX; ticks=4; }
//             else if byte == 0xB0 { code=BCS; mode=Relative; }
//             else if byte == 0xB1 { code=LDA; mode=IndirectY; ticks=5; }
//             else if byte == 0xB4 { code=LDY; mode=ZeroPageX; ticks=4; }
//             else if byte == 0xB5 { code=LDA; mode=ZeroPageX; ticks=4; }
//             else if byte == 0xB6 { code=LDX; mode=ZeroPageY; ticks=4; }
//             else if byte == 0xB8 { code=CLV; }
//             else if byte == 0xB9 { code=LDA; mode=AbsoluteY; ticks=4; }
//             else if byte == 0xBA { code=TSX; }
//             else if byte == 0xBC { code=LDY; mode=AbsoluteX; ticks=4; }
//             else if byte == 0xBD { code=LDA; mode=AbsoluteX; ticks=4; }
//             else if byte == 0xBE { code=LDX; mode=AbsoluteY; ticks=4; }
//             else if byte == 0xC0 { code=CPY; mode=Immediate; }
//             else if byte == 0xC1 { code=CMP; mode=IndirectX; ticks=6; }
//             else if byte == 0xC4 { code=CPY; mode=ZeroPage; ticks=3; }
//             else if byte == 0xC5 { code=CMP; mode=ZeroPage; ticks=3; }
//             else if byte == 0xC6 { code=DEC; mode=ZeroPage; ticks=5; }
//             else if byte == 0xC8 { code=INY; }
//             else if byte == 0xC9 { code=CMP; mode=Immediate; }
//             else if byte == 0xCA { code=DEX; }
//             else if byte == 0xCC { code=CPY; ticks=4; }
//             else if byte == 0xCD { code=CMP; ticks=4; }
//             else if byte == 0xCE { code=DEC; ticks=6; }
//             else if byte == 0xD0 { code=BNE; mode=Relative; }
//             else if byte == 0xD1 { code=CMP; mode=IndirectY; ticks=5; }
//             else if byte == 0xD5 { code=CMP; mode=ZeroPageX; ticks=4; }
//             else if byte == 0xD6 { code=DEC; mode=ZeroPageX; ticks=6; }
//             else if byte == 0xD8 { code=CLD; }
//             else if byte == 0xD9 { code=CMP; mode=AbsoluteY; ticks=4; }
//             else if byte == 0xDD { code=CMP; mode=AbsoluteX; ticks=4; }
//             else if byte == 0xDE { code=DEC; mode=AbsoluteX; ticks=7; }
//             else if byte == 0xE0 { code=CPX; mode=Immediate; }
//             else if byte == 0xE1 { code=SBC; mode=IndirectX; ticks=6; }
//             else if byte == 0xE4 { code=CPX; mode=ZeroPage; ticks=3; }
//             else if byte == 0xE5 { code=SBC; mode=ZeroPage; ticks=3; }
//             else if byte == 0xE6 { code=INC; mode=ZeroPage; ticks=5; }
//             else if byte == 0xE8 { code=INX; }
//             else if byte == 0xE9 { code=SBC; mode=Immediate; }
//             else if byte == 0xEA { code=NOP; }
//             else if byte == 0xEC { code=CPX; ticks=4; }
//             else if byte == 0xED { code=SBC; ticks=4; }
//             else if byte == 0xEE { code=INC; ticks=6; }
//             else if byte == 0xF0 { code=BEQ; mode=Relative; }
//             else if byte == 0xF1 { code=SBC; mode=IndirectY; ticks=5; }
//             else if byte == 0xF5 { code=SBC; mode=ZeroPageX; ticks=4; }
//             else if byte == 0xF6 { code=INC; mode=ZeroPageX; ticks=6; }
//             else if byte == 0xF8 { code=SED; }
//             else if byte == 0xF9 { code=SBC; mode=AbsoluteY; ticks=4; }
//             else if byte == 0xFD { code=SBC; mode=AbsoluteX; ticks=4; }
//             else if byte == 0xFE { code=INC; mode=AbsoluteX; ticks=7; }

//             // the following are unofficial opcodes
//             // http://wiki.nesdev.com/w/index.php/Programming_with_unofficial_OpCode

//             // NOOP +
//             else if byte == 0x1A || byte == 0x3A || byte == 0x5A || byte == 0x7A || byte == 0xDA || byte == 0xFA {
//                 code=NOP;
//             }
//             else if byte == 0x80 || byte == 0x82 || byte == 0x89 || byte == 0xC2 || byte == 0xE2 {
//                 code=IGN1;
//             }
//             else if byte == 0x04 || byte == 0x44 || byte == 0x64 {
//                 code=IGN1;
//                 ticks=3;
//             }
//             else if byte == 0x14 || byte == 0x34 || byte == 0x54 || byte == 0x74 || byte == 0xD4 || byte == 0xF4 {
//                 code=IGN1;
//                 ticks=4;
//             }
//             else if byte == 0x0C {
//                 code=IGN2;
//                 ticks = 4;
//             }
//             else if byte == 0x1C || byte == 0x3C || byte == 0x5C || byte == 0x7C || byte == 0xDC || byte == 0xFC {
//                 code=IGN2;
//                 // warning: can be 5 ticks if crossing page boundary
//                 ticks=4;
//             }
//             // LAX
//             else if byte == 0xA3 {
//                 code=LAX;
//                 mode=IndirectX;
//                 ticks=6;
//             }
//             else if byte == 0xA7 {
//                 code=LAX;
//                 mode=ZeroPage;
//                 ticks=3;
//             }
//             else if byte == 0xAF {
//                 code=LAX;
//                 mode=Absolute;
//                 ticks=4;
//             }
//             else if byte == 0xB3 {
//                 code=LAX;
//                 mode=IndirectY;
//                 ticks=5;
//             }
//             else if byte == 0xB7 {
//                 code=LAX;
//                 mode=ZeroPageY;
//                 ticks=4;
//             }
//             else if byte == 0xBF {
//                 code=LAX;
//                 mode=AbsoluteY;
//                 ticks=4;
//             }
//             // SAX
//             else if byte == 0x83 {
//                 code=SAX;
//                 mode=IndirectX;
//                 ticks=6;
//             }
//             else if byte == 0x87 {
//                 code=SAX;
//                 mode=ZeroPage;
//                 ticks=3;
//             }
//             else if byte == 0x8F {
//                 code=SAX;
//                 mode=Absolute;
//                 ticks=4;
//             }
//             else if byte == 0x97 {
//                 code=SAX;
//                 mode=ZeroPageY;
//                 ticks=4;
//             }
//             // SBC
//             else if byte == 0xEB { code=SBC; mode=Immediate; }
//             // RLA
//             else if byte == 0x23 { code=RLA; mode=IndirectX; ticks=8; }
//             else if byte == 0x27 { code=RLA; mode=ZeroPage; ticks=5; }
//             else if byte == 0x2F { code=RLA; mode=Absolute; ticks=6; }
//             else if byte == 0x33 { code=RLA; mode=IndirectY; ticks=8; }
//             else if byte == 0x37 { code=RLA; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x3B { code=RLA; mode=AbsoluteY; ticks=7; }
//             else if byte == 0x3F { code=RLA; mode=AbsoluteX; ticks=7; }
//             // RRA
//             else if byte == 0x63 { code=RRA; mode=IndirectX; ticks=8; }
//             else if byte == 0x67 { code=RRA; mode=ZeroPage; ticks=5; }
//             else if byte == 0x6F { code=RRA; mode=Absolute; ticks=6; }
//             else if byte == 0x73 { code=RRA; mode=IndirectY; ticks=8; }
//             else if byte == 0x77 { code=RRA; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x7B { code=RRA; mode=AbsoluteY; ticks=7; }
//             else if byte == 0x7F { code=RRA; mode=AbsoluteX; ticks=7; }
//             // SLO
//             else if byte == 0x03 { code=SLO; mode=IndirectX; ticks=8; }
//             else if byte == 0x07 { code=SLO; mode=ZeroPage; ticks=5; }
//             else if byte == 0x0F { code=SLO; mode=Absolute; ticks=6; }
//             else if byte == 0x13 { code=SLO; mode=IndirectY; ticks=8; }
//             else if byte == 0x17 { code=SLO; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x1B { code=SLO; mode=AbsoluteY; ticks=7; }
//             else if byte == 0x1F { code=SLO; mode=AbsoluteX; ticks=7; }
//             // SRE
//             else if byte == 0x43 { code=SRE; mode=IndirectX; ticks=8; }
//             else if byte == 0x47 { code=SRE; mode=ZeroPage; ticks=5; }
//             else if byte == 0x4F { code=SRE; mode=Absolute; ticks=6; }
//             else if byte == 0x53 { code=SRE; mode=IndirectY; ticks=8; }
//             else if byte == 0x57 { code=SRE; mode=ZeroPageX; ticks=6; }
//             else if byte == 0x5B { code=SRE; mode=AbsoluteY; ticks=7; }
//             else if byte == 0x5F { code=SRE; mode=AbsoluteX; ticks=7; }
//             // DCP
//             else if byte == 0xC3 { code=DCP; mode=IndirectX; ticks=8; }
//             else if byte == 0xC7 { code=DCP; mode=ZeroPage; ticks=5; }
//             else if byte == 0xCF { code=DCP; mode=Absolute; ticks=6; }
//             else if byte == 0xD3 { code=DCP; mode=IndirectY; ticks=8; }
//             else if byte == 0xD7 { code=DCP; mode=ZeroPageX; ticks=6; }
//             else if byte == 0xDB { code=DCP; mode=AbsoluteY; ticks=7; }
//             else if byte == 0xDF { code=DCP; mode=AbsoluteX; ticks=7; }
//             // ISC
//             else if byte == 0xE3 { code=ISC; mode=IndirectX; ticks=8; }
//             else if byte == 0xE7 { code=ISC; mode=ZeroPage; ticks=5; }
//             else if byte == 0xEF { code=ISC; mode=Absolute; ticks=6; }
//             else if byte == 0xF3 { code=ISC; mode=IndirectY; ticks=8; }
//             else if byte == 0xF7 { code=ISC; mode=ZeroPageX; ticks=6; }
//             else if byte == 0xFB { code=ISC; mode=AbsoluteY; ticks=7; }
//             else if byte == 0xFF { code=ISC; mode=AbsoluteX; ticks=7; }
//             // ALR
//             else if byte == 0x4B { code=ALR; mode=Immediate; ticks=2; }
//             // ANC
//             else if byte == 0x0B { code=ANC; mode=Immediate; ticks=2; }
//             else if byte == 0x2B { code=ANC; mode=Immediate; ticks=2; }
//             // ARR
//             else if byte == 0x6B { code=ARR; mode=Immediate; ticks=2; }
//             // AXS
//             else if byte == 0xCB { code=AXS; mode=Immediate; ticks=2; }

//             else if byte == 0xAB { code=LAX; mode=Immediate; ticks=2; }
//             else if byte == 0x9C { code=SHY; mode=Absolute; ticks=5; }

//             Self._codes[byte] = code;
//             Self._modes[byte] = mode;
//             Self._ticks[byte] = ticks;
//         }
//     }
// }
