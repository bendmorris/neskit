import neskit.nes;

struct Ram {
    var mem: CArray[Uint8, 0x800];
    var dmaCounter: Int = 0;

    public static function new() {
        var ram: Ram;
        return ram;
    }

    public function reset() {
        for i in 0 ... 0x800
        {
            this.mem[i] = 0xff;
        }
    }

    public function read(nes: Ptr[Nes], addr: Uint32): Uint8 using implicit nes {
        if addr < 0x2000 {
            // RAM
            return this.mem[addr & 0x7ff];
        } else if addr > 0x4018 {
            // cartridge space
            return nes.mapper.read(addr);
        }
        else if addr < 0x4000 {
            // ppu, mirrored 7 bytes of io registers
            return nes.ppu.read(addr & 7);
        } else if addr == 0x4016 || addr == 0x4017 {
            // controller read
            var port = addr - 0x4016;
            return if nes.controllers[port].active then nes.controllers[port].pop() else 0;
        } else if addr >= 0x4000 && addr <= 0x4018 {
            // APU registers
            return nes.apu.read(addr);
        } else {
            // TODO: bad address
            return 0;
        }
    }

    public function write(nes: Ptr[Nes], addr: Uint32, data: Uint8) using implicit nes {
        if addr < 0x2000 {
            // write to RAM (mirrored)
            this.mem[addr & 0x7ff] = data;
        } else if addr > 0x4018 {
            // cartridge space
            nes.mapper.write(addr, data);
        } else if addr < 0x4000 {
            // ppu, mirrored 7 bytes of io registers
            nes.ppu.write(addr & 7, data);
        } else if addr == 0x4014 {
            // sprite DMA
            this.dma(data);
        } else if addr == 0x4016 {
            // controller latch
            if nes.controllers[0].active {
                nes.controllers[0].latch();
            }
            if nes.controllers[1].active {
                nes.controllers[1].latch();
            }
        } else if addr >= 0x4000 && addr <= 0x4018 {
            nes.apu.write(addr, data);
        }
    }

    function dma(nes: Ptr[Nes], data: Uint8) using implicit nes
    {
        var start = (data << 8);
        var i = start;
        while (i < start + 256)
        {
            // shortcut, written to 0x2004
            nes.ppu.write(4, this.read((i++) & 0xffff) & 0xff);
        }
        this.dmaCounter = 2;
    }
}
