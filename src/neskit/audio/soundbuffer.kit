struct SoundBuffer[$N] {
    public var length: Size = 0;
    var start: Size = 0;
    var data: CArray[Float, N] = empty;

    rules {
        ($this.capacity) => N;
        ($this.last) => if $this.length == 0 then 0 else $this.get($this.length - 1);
        ($this[$i]) => $this.data[($this.start + $i) % N];
        ($this[$i] = $v) => $this.data[($this.start + $i) % N] = $v;
        ($this.clear()) => $this.start = $this.length = 0;
    }

    public static function new() {
        return struct SoundBuffer;
    }

    public function push(v: Float) {
        this.data[(this.start + this.length++) % N] = v;
    }

    public function pop(): Float {
        if this.length > 0 {
            var val = this[0];
            --this.length;
            if ++this.start >= N {
                this.start -= N;
            }
            return val;
        } else {
            return 0;
        }
    }

    public function lerp(i: Float): Float {
        var bottom = i as Uint;
        var top = (i + 1) as Uint;
        var t: Float = i - bottom;
        return (1 - t) * this[bottom] + t * this[top];
    }

    public function clear() {
        this.start = this.length = 0;
    }
}
