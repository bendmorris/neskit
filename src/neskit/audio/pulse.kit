import neskit.apu;

struct Pulse {
    public static var dutyLookup: CArray[CArray[Bool, 8], 4];

    var sweepEnabled: Bool = false;
    var sweepPeriod: Int = 0;
    var sweepShift: Int = 0;
    var sweepNegate: Bool = false;
    var sweepCounter: Int = 0;

    var cachedDuty: Ptr[Bool] = &(Self.dutyLookup[0][0]);
    var volume: Int = 0;
    var envelopeCounter: Int = 0;
    var envelopeDiv: Int = 0;

    var amplitude: Uint8 = 0;
    var frequency: Uint8 = 0;
    var period: Int = 0;
    var position: Float = 0;
    var duty: Int = 0;
    var dutyPos: Int = 0;
    var length: Int = 0;
    var lengthCounter: Int = 0;
    var constantVolume: Bool = false;
    var lengthCounterHalt: Bool = false;

    rules {
        ($this.enabled) => $this.period > 0 && ($this.lengthCounterHalt || $this.lengthCounter > 0) && $this.frequency >= 8 && $this.frequency <= 0x7ff;
    }

    public static function new() {
        return struct Pulse {};
    }

    public var pulse2: Bool = false;

    public function readReg(i: Uint8): Uint8 {
        match i {
            1 => return this.volume | (if this.constantVolume then 0x10 else 0) | (if this.lengthCounterHalt then 0x20 else 0) | (this.duty << 6);
            2 => return this.sweepShift | (if this.sweepNegate then 0x8 else 0) | (this.sweepPeriod << 4) | (if this.sweepEnabled then 0x80 else 0);
            3 => return this.frequency & 0xff;
            4 => return ((this.frequency & 0x700) >> 8) | (this.length << 3);
            default => return 0;
        }
    }

    public function writeReg(i: Uint8, v: Uint8) {
        match i {
            1 => {
                this.envelopeDiv = this.amplitude = this.volume = v & 0xf;
                this.envelopeCounter = 0xf;
                this.constantVolume = getbit(v, 4);
                this.lengthCounterHalt = getbit(v, 5);
                this.duty = (v & 0xc0) >> 6;
                this.cachedDuty = &Self.dutyLookup[this.duty][0];
            }
            2 => {
                this.sweepShift = v & 0x7;
                this.sweepNegate = getbit(v, 3);
                this.sweepCounter = (this.sweepPeriod = (v >> 4) & 0x7) + 1;
                this.sweepEnabled = getbit(v, 7);
            }
            3 => {
                this.setFrequency((this.frequency & 0x700) | v);
            }
            4 => {
                this.setFrequency((this.frequency & 0xff) | ((v & 7) as Uint16 << 8));
                var l = (v & 0xf8) >> 3;
                this.lengthCounter = Apu.lengthCounterTable[l];
                this.envelopeCounter = this.volume;
                this.length = l;
            }
        }
    }

    function setFrequency(f: Int)
    {
        if f < 8 {
            this.period = 0;
        } else {
            this.period = 4 * (f + 1);
        }
        this.frequency = f;
    }

    public function envelopeClock() {
        if this.envelopeDiv > 0 {
            if --this.envelopeDiv == 0 && this.envelopeCounter > 0 {
                this.envelopeDiv = this.volume;
                this.amplitude = if this.constantVolume then this.volume else this.envelopeCounter;
                if --this.envelopeCounter == 0 && this.lengthCounterHalt {
                    this.envelopeCounter = 0xf;
                }
            }
        }
    }

    public function lengthClock() {
        if !this.lengthCounterHalt && this.lengthCounter > 0 {
            this.lengthCounter -= 2;
        }

        if this.sweepEnabled && this.enabled {
            if --this.sweepCounter <= 0 {
                this.setFrequency(this.frequency + (this.frequency >> this.sweepShift) * (if this.sweepNegate then -1 else 1));
                this.sweepCounter += this.sweepPeriod + 1;
            }
        }
    }

    public function play(rate: Float): Uint8
    {
        var val = 0;
        if this.enabled {
            if ((this.position += rate) > this.period) {
                this.dutyPos = (this.dutyPos + 1) % 8;
                this.position -= this.period;
            }
            val = if this.cachedDuty[this.dutyPos] then this.amplitude else 0;
        }

        return val;
    }
}
