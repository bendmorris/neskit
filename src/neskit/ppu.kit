import neskit.mirror;
import neskit.palette;

struct Ppu {
    public static var defaultPalette: CArray[Uint8, 32] = [
        0x09, 0x01, 0x00, 0x01, 0x00, 0x02, 0x02, 0x0D,
        0x08, 0x10, 0x08, 0x24, 0x00, 0x00, 0x04, 0x2C, 0x09, 0x01, 0x34, 0x03,
        0x00, 0x04, 0x00, 0x14, 0x08, 0x3A, 0x00, 0x02, 0x00, 0x20, 0x2C, 0x08
    ];
    static var OPEN_BUS_DECAY_CYCLES: Uint32 = 1000000;

    public static function new() {
        var ppu = struct Ppu {};
        for i in 0 ... ppu.oam.length {
            ppu.oam[i] = 0xff;
        }
        for i in 0 ... ppu.pal.length {
            ppu.pal[i] = Self.defaultPalette[i];
        }
        return ppu;
    }

    public {
        var frameCount: Int = 1;
        var stolenCycles: Int = 0;
        var finished: Bool = false;

        const oam: CArray[Uint8, 0x100] = empty;
        const pal: CArray[Uint8, 0x20] = empty;
        const nametables: CArray[Uint8, 0x1000] = empty;

        var scanline: Int = 0;
        var cycles: Int = 1;

        const pixels: CArray[Uint32, 61440] = empty;
    }

    var vramAddr: Uint16 = 0;
    var vramAddrTemp: Uint16 = 0;
    var xScroll: Uint8 = 0;
    var even = true;

    var bgPatternAddr: Uint16 = 0x1000;
    var sprPatternAddr: Uint16 = 0;
    var oamAddr: Uint8 = 0;

    var bgShiftRegH: Uint16 = 0;
    var bgShiftRegL: Uint16 = 0;
    var bgAttrShiftRegH: Uint8 = 0;
    var bgAttrShiftRegL: Uint8 = 0;
    // $2000 PPUCTRL registers
    var nmiEnabled: Bool = false;
    var vramInc: Int = 1;
    var tallSprites: Bool = false;
    // $2001 PPUMASK registers
    var greyscale: Bool = false;
    var bgClip: Bool = false;
    var sprClip: Bool = false;
    var bgRender: Bool = false;
    var sprRender: Bool = false;
    var emph: Int = 0;
    // $2002 PPUSTATUS registers
    var spriteOverflow: Bool = false;
    var sprite0: Bool = false;
    var vblank: Bool = false;

    var spriteBgFlags: CArray[Bool, 8] = empty;
    var spriteShiftRegH: CArray[Uint8, 8] = empty;
    var spriteShiftRegL: CArray[Uint8, 8] = empty;
    var spriteXlatch: CArray[Uint8, 8] = empty;
    var spritepals: CArray[Uint8, 8] = empty;
    var openBus: Uint8 = 0;
    var openBusDecayH: Uint32 = 0;
    var openBusDecayL: Uint32 = 0;
    var readBuffer: Uint16 = 0;
    var tileAddr: Uint16 = 0;
    var tileL: Uint16 = 0;
    var tileH: Uint16 = 0;
    var attr: Uint16 = 0;
    var attrH: Uint8 = 0;
    var attrL: Uint8 = 0;

    var found: Int = 0;
    var sprite0here: Bool = false;
    var suppress: Bool = false;

    var chrMap: CArray[Uint16, 8] = empty;
    var nt0: Ptr[Uint8] = null;
    var nt1: Ptr[Uint8] = null;
    var nt2: Ptr[Uint8] = null;
    var nt3: Ptr[Uint8] = null;

    rules {
        ($this.enabled) => $this.bgRender || $this.sprRender;
    }

    public function init(nes: Ptr[Nes]) {
        for i in 0 ... 8 {
            this.chrMap[i] = (0x400 * i) & (nes.rom.chrSize - 1);
        }
        this.setMirror(nes.rom.mirror);
    }

    public function setMirror(m: MirrorMode) {
        match m {
            H_MIRROR => {
                var a = &(this.nametables)[0x0];
                var b = &(this.nametables)[0x400];
                this.nt0 = a;
                this.nt1 = a;
                this.nt2 = b;
                this.nt3 = b;
            }
            V_MIRROR => {
                var a = &(this.nametables)[0x0];
                var b = &(this.nametables)[0x400];
                this.nt0 = a;
                this.nt1 = b;
                this.nt2 = a;
                this.nt3 = b;
            }
            SS_MIRROR0 => {
                var a = &(this.nametables)[0x0];
                this.nt0 = a;
                this.nt1 = a;
                this.nt2 = a;
                this.nt3 = a;
            }
            SS_MIRROR1 => {
                var a = &(this.nametables)[0x400];
                this.nt0 = a;
                this.nt1 = a;
                this.nt2 = a;
                this.nt3 = a;
            }
            FOUR_SCREEN_MIRROR => {
                this.nt0 = &(this.nametables)[0x0];
                this.nt1 = &(this.nametables)[0x400];
                this.nt2 = &(this.nametables)[0x800];
                this.nt3 = &(this.nametables)[0xc00];
            }
        }
    }

    public function read(nes: Ptr[Nes], addr: Uint16): Uint8 using implicit nes {
        var _readResult: Uint8;
        if addr < 0x2000 {
            _readResult = nes.rom.chr[this.chrMap[addr >> 10] + (addr & 1023)];
        } else {
            match addr & 0xc00 {
                0 => {
                    _readResult = this.nt0[addr & 0x3ff];
                }
                0x400 => {
                    _readResult = this.nt1[addr & 0x3ff];
                }
                0x800 => {
                    _readResult = this.nt2[addr & 0x3ff];
                }
                default => {
                    if addr >= 0x3f00 {
                        addr &= 0x1f;
                        if addr >= 0x10 && ((addr & 3) == 0) {
                            addr -= 0x10;
                        }
                        _readResult = this.pal[addr];
                    } else {
                        _readResult = this.nt3[addr & 0x3ff];
                    }
                }
            }
        }
        return _readResult;
    }

    public function write(nes: Ptr[Nes], addr: Int, data: Int) using implicit nes {
        if (addr < 0x2000) {
            nes.rom.chr[this.chrMap[addr >> 10] + (addr & 0x3ff)] = data;
        } else {
            match addr & 0xc00
            {
                0x0 => {
                    this.nt0[addr & 0x3ff] = data;
                }
                0x400 => {
                    this.nt1[addr & 0x3ff] = data;
                }
                0x800 => {
                    this.nt2[addr & 0x3ff] = data;
                }
                default => {
                    if addr >= 0x3f00 {
                        addr &= 0x1f;
                        if (addr >= 0x10 && ((addr & 3) == 0))
                        {
                            // mirrors
                            addr -= 0x10;
                        }
                        this.pal[addr] = data & 0x3f;
                    } else {
                        this.nt3[addr & 0x3ff] = data;
                    }
                }
            }
        }
    }

    public function regRead(nes: Ptr[Nes], addr: Uint8): Uint8 using implicit nes {
        this.catchUp();

        match addr {
            2 => {
                if this.scanline == 241 {
                    if this.cycles < 4 {
                        if this.cycles == 0 {
                            this.vblank = false;
                        }
                        this.suppress = true;
                    }
                }

                // PPUSTATUS
                this.even = true;
                this.openBus = (if this.spriteOverflow then 0x20 else 0) |
                    (if this.sprite0 then 0x40 else 0) |
                    (if this.vblank then 0x80 else 0) |
                    (this.openBus & 0x1f);
                // reading PPUSTATUS doesn't refresh decay of the lower 5 bits
                this.openBusDecayH = Self.OPEN_BUS_DECAY_CYCLES;
                this.vblank = false;
            }
            4 => {
                // read from sprite ram
                // clearing bits 2-4 will cause PPU open bus test to pass,
                // but sprite RAM test to fail
                this.openBus = this.oam[this.oamAddr] & 0xe3;
                this.openBusDecayH = this.openBusDecayL = Self.OPEN_BUS_DECAY_CYCLES;
            }
            7 => {
                // PPUDATA
                // read is buffered and returned next time
                // unless reading from sprite memory
                if (this.vramAddr & 0x3fff) < 0x3f00 {
                    this.openBus = this.readBuffer;
                    this.readBuffer = this.read(this.vramAddr & 0x3fff);
                } else {
                    this.openBus = (this.openBus & 0xc0) | (this.read(this.vramAddr) & 0x3f);
                    this.readBuffer = this.read((this.vramAddr & 0x3fff) - 0x1000);
                }
                this.openBusDecayH = this.openBusDecayL = Self.OPEN_BUS_DECAY_CYCLES;
                if !this.enabled || (this.scanline > 240 && this.scanline < 261) {
                    this.vramAddr += this.vramInc;
                } else {
                    this.incrementX();
                    this.incrementY();
                }
            }

            default => {}
        }

        return this.openBus;
    }

    public function regWrite(nes: Ptr[Nes], addr: Uint16, data: Uint8) using implicit nes {
        // printf("ppu write %.4x %.2x\n", addr, data);
        this.catchUp();
        this.openBus = data;
        this.openBusDecayH = this.openBusDecayL = Self.OPEN_BUS_DECAY_CYCLES;

        match addr {
            0 => {
                // PPUCTRL
                this.vramAddrTemp &= ~0xc00;
                this.vramAddrTemp += (data & 3) as Uint16 << 10;
                this.vramInc = if getbit(data, 2) then 0x20 else 1;
                this.sprPatternAddr = if getbit(data, 3) then 0x1000 else 0;
                this.bgPatternAddr = if getbit(data, 4) then 0x1000 else 0;
                this.tallSprites = getbit(data, 5);
                // ppu master/slave?
                this.nmiEnabled = getbit(data, 7);
                if !this.nmiEnabled {
                    this.suppress = true;
                }
            }
            1 => {
                // PPUMASK
                this.greyscale = getbit(data, 0);
                this.bgClip = getbit(data, 1);
                this.sprClip = getbit(data, 2);
                this.bgRender = getbit(data, 3);
                this.sprRender = getbit(data, 4);
                this.emph = (data & 0xe0) << 1;
            }
            3 => {
                // OAMADDR
                this.oamAddr = data;
            }
            4 => {
                // OAMDATA
                // printf("OAM: %.2x = %.2x\n", this.oamAddr, data);
                this.oam[this.oamAddr++] = data;
            }
            5 => {
                // PPUSCROLL
                if this.even {
                    // update horizontal scroll
                    this.vramAddrTemp &= ~0x1f;
                    this.xScroll = data & 7;
                    this.vramAddrTemp += data >> 3;
                    this.even = false;
                } else {
                    // update vertical scroll
                    this.vramAddrTemp &= ~0x7000;
                    this.vramAddrTemp |= (data as Uint16 & 7) << 12;
                    this.vramAddrTemp &= ~0x3e0;
                    this.vramAddrTemp |= (data as Uint16 & 0xf8) << 2;
                    this.even = true;
                }
            }
            6 => {
                // PPUADDR: write twice to set this register data
                if this.even
                {
                    // high byte
                    this.vramAddrTemp &= 0xff;
                    this.vramAddrTemp |= ((data as Uint16 & 0x3f) << 8);
                    this.even = false;
                } else {
                    this.vramAddrTemp &= 0x7f00;
                    this.vramAddrTemp |= data;
                    this.vramAddr = this.vramAddrTemp;
                    this.even = true;
                }
            }
            7 => {
                // PPUDATA: write to location specified by vramAddr
                this.write(this.vramAddr & 0x3fff, data);
                if !this.enabled || (this.scanline > 240 && this.scanline < 261) {
                    this.vramAddr += this.vramInc;
                } else {
                    // if 2007 is read during rendering PPU increments both horiz
                    // and vert counters erroneously.
                    if ((this.cycles - 1) & 7) != 7 {
                        this.incrementX();
                        this.incrementY();
                    }
                }
            }
        }
    }

    function incPixel(nes: Ptr[Nes]) using implicit nes {
        if ++this.cycles > 340 {
            this.cycles = 0;
            if this.scanline < 241 {
                nes.mapper.onScanline(this.scanline);
            }
            if ++this.scanline > 261 {
                this.scanline = 0;
                ++this.frameCount;
                if this.bgRender && (this.frameCount & 1 == 1) {
                    ++this.cycles;
                }
                this.finished = true;
            }
        }
    }

    public function catchUp(nes: Ptr[Nes]) using implicit nes {
        this.stolenCycles += nes.cpu.cycles;
        nes.cpu.cycles = 0;

        while !this.finished && this.stolenCycles > 0 {
            --this.stolenCycles;
            this.clock();
            this.incPixel();
            this.clock();
            this.incPixel();
            this.clock();
            this.incPixel();
        }

        this.stolenCycles = 0;
    }

    public function clock(nes: Ptr[Nes]) using implicit nes {
        var enabled = this.enabled;

        if this.suppress {
            nes.cpu.suppressNmi();
            this.suppress = false;
        }

        if this.scanline < 240 || this.scanline == 261 {
            // visible scanlines
            if enabled
                && ((this.cycles >= 1 && this.cycles <= 256)
                || (this.cycles >= 321 && this.cycles <= 336))
            {
                // fetch background tiles, load shift registers
                this.bgFetch();
            } else if this.cycles == 257 && enabled {
                // horizontal bits of vramAddr = vramAddrTemp
                this.vramAddr &= ~0x41f as Uint16;
                this.vramAddr |= this.vramAddrTemp & 0x41f;
            } else if this.cycles > 257 && this.cycles <= 341 {
                // clear the oam address from pxls 257-341 continuously
                this.oamAddr = 0;
            }
            if (this.cycles == 340) && enabled {
                // read the same nametable byte twice
                // this signals the MMC5 to increment the scanline counter
                this.fetchNTByte();
                this.fetchNTByte();
            }
            if this.cycles == 260 && enabled {
                this.evalSprites();
            }
            if this.scanline == 261 {
                if this.cycles == 1 {
                    // turn off vblank, sprite 0, sprite overflow flags
                    this.vblank = this.sprite0 = this.spriteOverflow = false;
                } else if this.cycles >= 280 && this.cycles <= 304 && enabled
                {
                    this.vramAddr = this.vramAddrTemp;
                }
            }
        } else if this.scanline == 241 && this.cycles == 1 {
            this.vblank = true;
        }

        if this.scanline < 240 {
            if this.cycles >= 1 && this.cycles <= 256 {
                var bufferOffset = (this.scanline as Uint32 << 8) + (this.cycles - 1);
                // bg drawing
                if this.bgRender {
                    var isBG = this.drawBGPixel(bufferOffset);
                    this.drawSprites(this.scanline as Uint32 << 8, this.cycles - 1, isBG);
                } else {
                    // rendering is off; draw either the background color or
                    // if the PPU address points to the palette, draw that color
                    var bgcolor = if (this.vramAddr > 0x3f00 && this.vramAddr < 0x3fff) then this.read(this.vramAddr) else this.pal[0];
                    this.pset(bufferOffset, bgcolor);
                }
            }
        }

        nes.cpu.nmi = this.vblank && this.nmiEnabled;

        // open bus value decay
        if this.openBusDecayH > 0 && --this.openBusDecayH == 0 {
            this.openBus &= 0x1f;
        }
        if this.openBusDecayL > 0 && --this.openBusDecayL == 0 {
            this.openBus &= 0xe0;
        }
    }

    function incrementY() {
        if (this.vramAddr & 0x7000 != 0x7000) {
            this.vramAddr += 0x1000;
        } else {
            this.vramAddr &= ~0x7000;
            var y = (this.vramAddr & 0x3e0) >> 5;
            if (y == 29) {
                y = 0;
                this.vramAddr ^= 0x800;
            } else if (y == 31) {
                y = 0;
            } else {
                ++y;
            }
            this.vramAddr = (this.vramAddr & ~0x3e0) | (y << 5);
        }
    }

    function incrementX() {
        // increment horizontal part of vramAddr
        // if coarse X == 31
        if (this.vramAddr & 0x001F) == 31 {
            // coarse X = 0
            this.vramAddr &= ~0x001F;
            // switch horizontal nametable
            this.vramAddr ^= 0x0400;
        } else {
            // increment coarse X
            ++this.vramAddr;
        }
    }

    function bgFetch(nes: Ptr[Nes]) using implicit nes {
        this.bgShiftClock();

        this.bgAttrShiftRegH |= this.attrH;
        this.bgAttrShiftRegL |= this.attrL;

        // background fetches
        match (this.cycles - 1) & 7 {
            1 => {
                this.fetchNTByte();
            }
            3 => {
                // fetch attribute
                this.attr = this.getAttribute(((this.vramAddr & 0xc00) | 0x23c0),
                                (this.vramAddr) & 0x1f,
                                (((this.vramAddr) & 0x3e0) >> 5));
            }
            5 => {
                // fetch low bg byte
                this.tileL = this.read((this.tileAddr) + ((this.vramAddr & 0x7000) >> 12));
            }
            7 => {
                // fetch high bg byte
                this.tileH = this.read((this.tileAddr) + ((this.vramAddr & 0x7000) >> 12) + 8);

                this.bgShiftRegH |= this.tileH;
                this.bgShiftRegL |= this.tileL;

                this.attrH = (this.attr >> 1) & 1;
                this.attrL = this.attr & 1;

                if this.cycles != 256 {
                    this.incrementX();
                } else {
                    this.incrementY();
                }
            }
            default => {}
        }
    }

    function fetchNTByte(nes: Ptr[Nes]) using implicit nes {
        this.tileAddr = (this.read(((this.vramAddr & 0xc00) | 0x2000) + (this.vramAddr & 0x3ff)) as Uint16 << 4) + this.bgPatternAddr;
    }

    function drawBGPixel(nes: Ptr[Nes], bufferOffset: Uint32): Bool using implicit nes {
        var isBG: Bool;
        if !this.bgClip && (bufferOffset & 0xff) < 8 {
            // left clip
            this.pset(bufferOffset, this.pal[0]);
            isBG = true;
        } else {
            var bgPix = (getbiti(this.bgShiftRegH, 15 - this.xScroll) << 1)
                    + getbiti(this.bgShiftRegL, 15 - this.xScroll);
            var bgPal = (getbiti(this.bgAttrShiftRegH, 7 - this.xScroll) << 1)
                    + getbiti(this.bgAttrShiftRegL, 7 - this.xScroll);
            isBG = bgPix == 0;
            this.pset(bufferOffset, if isBG then this.pal[0] else this.pal[(bgPal << 2) + bgPix]);
        }
        return isBG;
    }

    function bgShiftClock() {
        this.bgShiftRegH <<= 1;
        this.bgShiftRegL <<= 1;
        this.bgAttrShiftRegH <<= 1;
        this.bgAttrShiftRegL <<= 1;
    }

    /**
     * evaluates PPU sprites for the NEXT scanline
     */
    function evalSprites(nes: Ptr[Nes]) using implicit nes {
        this.sprite0here = false;
        var ypos: Int = 0;
        var offset: Int = 0;
        var tilefetched: Int = 0;
        this.found = 0;
        // primary evaluation
        // need to emulate behavior when OAM address is set to nonzero here
        var spritestart = 0;
        while spritestart < 253 {
            // for each sprite, first we cull the non-visible ones
            ypos = this.oam[spritestart];
            offset = this.scanline - ypos;
            if ypos > this.scanline || ypos > 254 || offset > (if this.tallSprites then 15 else 7) {
                // sprite is out of range vertically
                spritestart += 4;
                continue;
            }

            if spritestart == 0 {
                this.sprite0here = true;
            }

            if this.found >= 8 {
                // if more than 8 sprites, set overflow bit and stop looking
                // TODO: add "no sprite limit" option
                this.spriteOverflow = true;
                // obscure (hardware glitch) behavior not yet implemented
                break;
            }

            // set up sprite for rendering
            var oamextra = this.oam[spritestart + 2];
            // bg flag
            this.spriteBgFlags[this.found] = getbit(oamextra, 5);
            // x value
            this.spriteXlatch[this.found] = this.oam[spritestart + 3];
            this.spritepals[this.found] = ((oamextra & 3) + 4) * 4;
            if getbit(oamextra, 7) {
                // if sprite is flipped vertically, reverse the offset
                offset = (if this.tallSprites then 15 else 7) - offset;
            }
            // now correction for the fact that 8x16 tiles are 2 separate tiles
            if offset > 7 {
                offset += 8;
            }
            // get tile address (8x16 sprites can use both pattern tbl pages but only the even tiles)
            var tilenum = this.oam[spritestart + 1];
            this.spriteFetch(tilenum, offset, oamextra);
            ++this.found;

            spritestart += 4;
        }
        for i in this.found ... 8 {
            // fill unused sprite registers with zeros
            this.spriteShiftRegL[i] = 0;
            this.spriteShiftRegH[i] = 0;
        }
    }

    function spriteFetch(nes: Ptr[Nes], tilenum: Int, offset: Int, oamextra: Int) using implicit nes {
        var tilefetched: Int;
        if this.tallSprites {
            tilefetched = ((tilenum & 1) * 0x1000) + (tilenum & 0xfe) * 16;
        } else {
            tilefetched = tilenum * 16 + this.sprPatternAddr;
        }
        tilefetched += offset;
        // load sprite shift registers
        var hflip:Bool = getbit(oamextra, 6);
        if !hflip {
            this.spriteShiftRegL[this.found] = reverseByte(this.read(tilefetched));
            this.spriteShiftRegH[this.found] = reverseByte(this.read(tilefetched + 8));
        } else {
            this.spriteShiftRegL[this.found] = this.read(tilefetched);
            this.spriteShiftRegH[this.found] = this.read(tilefetched + 8);
        }
    }

    /**
     * draws appropriate lines of the sprites selected by sprite evaluation
     */
    function drawSprites(bufferOffset: Uint32, x: Int, bgflag: Bool) {
        //sprite left 8 pixels clip
        var startdraw: Int = if this.sprClip then 0 else 8;
        var off: Int = 0;
        var sprpxl: Int = 0;
        var index: Int = 7;

        var y: Int = this.found - 1;
        while y >= 0 {
            off = x - this.spriteXlatch[y];
            if off >= 0 && off < 8 {
                if (this.spriteShiftRegH[y] & 1) + (this.spriteShiftRegL[y] & 1) != 0 {
                    index = y;
                    sprpxl = 2 * (this.spriteShiftRegH[y] & 1) + (this.spriteShiftRegL[y] & 1);
                }
                this.spriteShiftRegH[y] >>= 1;
                this.spriteShiftRegL[y] >>= 1;
            }
            --y;
        }
        if sprpxl == 0 || x < startdraw || !this.sprRender {
            // no opaque sprite pixel here
        } else {
            if this.sprite0here && (index == 0) && !bgflag && x < 255 {
                // sprite 0 hit
                this.sprite0 = true;
            }
            if !this.spriteBgFlags[index] || bgflag {
                this.pset(bufferOffset + x, this.pal[this.spritepals[index] + sprpxl]);
            }
        }
    }

    function getAttribute(nes: Ptr[Nes], ntstart: Uint16, tileX: Uint8, tileY: Uint8) using implicit nes {
        var base = this.read(ntstart + (tileX >> 2) + 8 * (tileY >> 2));
        if getbit(tileY, 1) {
            if getbit(tileX, 1) {
                return (base >> 6) & 3;
            } else {
                return (base >> 4) & 3;
            }
        } else {
            if getbit(tileX, 1) {
                return (base >> 2) & 3;
            } else {
                return base & 3;
            }
        }
    }

    function pset(offset: Uint32, value: Uint8) {
        // greyscale
        if this.greyscale {
            value &= 0x30;
        }
        // color emphasis
        value = (value & 0x3f) | this.emph;
        // printf("%u %u %.6x\n", offset % 256, offset / 256 as Uint16, Palette.getColor(value) & 0xffffff);
        this.pixels[offset] = Palette.getColor(value);
    }

    public function dma(nes: Ptr[Nes], data: Uint8) using implicit nes {
        var start: Uint16 = data << 8;
        for i in 0 ... 0x100 {
            // shortcut, written to 0x2004
            this.oam[this.oamAddr++] = nes.read(start + i);
        }
    }
}
