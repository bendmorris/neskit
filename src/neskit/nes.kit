import neskit.apu;
import neskit.controller;
import neskit.cpu;
import neskit.mapper;
import neskit.ppu;
import neskit.ram;
import neskit.rom;

struct Nes {
    public var apu: Apu;
    public var cpu: Cpu;
    public var ppu: Ppu;
    public var ram: Ram;
    public var rom: Rom;
    public var mapper: Mapper;
    public var controllers: CArray[NesController, 2] = empty;

    public static function new() {
        var cpu = Cpu.new();
        var ram = Ram.new();
        var apu = Apu.new();
        var ppu = Ppu.new();
        var nes = struct Nes {
            cpu,
            ram,
            apu,
            ppu,
            rom: empty,
            mapper: empty,
        };
        nes.controllers[0] = NesController.new();
        nes.controllers[1] = NesController.new();
        return nes;
    }

    public function loadRom(path: CString) using implicit this {
        printf("NES: loading %s\n", path);
        var result = Rom.new(path);
        this.rom = result.unwrap();
        this.mapper = this.rom.getMapper();
        this.mapper.init();
        this.ppu.init();
        this.cpu.pc = (this.mapper.read(0xfffd) as Uint16 << 8) | this.mapper.read(0xfffc);
    }

    public function init() using implicit this {
        printf("NES: init\n");
        this.ram.reset();
        this.ram.mem[0x0008] = 0xf7;
        this.ram.mem[0x0009] = 0xef;
        this.ram.mem[0x000a] = 0xdf;
        this.ram.mem[0x000f] = 0xbf;
        for i in 0x4000 ...  0x4010 {
            this.apu.write(i - 0x4000, 0);
        }
        this.apu.write(0x0015, 0);
        this.apu.write(0x0017, 0);
    }

    public function reset() using implicit this {
        printf("NES: reset\n");
        this.cpu.pc = (this.mapper.read(0xfffd) as Uint16 << 8) | this.mapper.read(0xfffc);
        this.apu.write(0x0015, 0);
        this.apu.write(0x0017, this.apu.read(0x0017));
        this.cpu.id = true;
    }

    public function runFrame() using implicit this {
        this.cpu.runFrame();
    }
}
