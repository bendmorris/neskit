import neskit.apu;
import neskit.controller;
import neskit.cpu;
import neskit.mapper;
import neskit.ppu;
import neskit.rom;

struct Nes {
    public var apu: Apu;
    public var cpu: Cpu;
    public var ppu: Ppu;
    public var ram: CArray[Uint8, 0x800];
    public var rom: Rom;
    public var mapper: Mapper;
    public var controllers: CArray[NesController, 2] = empty;

    public static function new(): Self {
        var cpu = Cpu.new();
        var apu = Apu.new();
        var ppu = Ppu.new();
        var nes = struct Self {
            cpu,
            ram: empty,
            apu,
            ppu,
            rom: empty,
            mapper: empty,
        };
        for i in 0 ... nes.ram.length {
            nes.ram[i] = 0xff;
        }
        nes.controllers[0] = NesController.new();
        nes.controllers[1] = NesController.new();
        return nes;
    }

    public function loadRom(path: CString) using implicit this {
        printf("NES: loading %s\n", path);
        var result = Rom.new(path);
        this.rom = result.unwrap();
        this.mapper = this.rom.getMapper();
        this.mapper.init();
        this.ppu.init();
        this.cpu.pc = (this.mapper.read(0xfffd) as Uint16 << 8) | this.mapper.read(0xfffc);
    }

    public function init() using implicit this {
        printf("NES: init\n");
        for i in 0 ... this.ram.length {
            this.ram[i] = 0xff;
        }
        this.ram[0x0008] = 0xf7;
        this.ram[0x0009] = 0xef;
        this.ram[0x000a] = 0xdf;
        this.ram[0x000f] = 0xbf;
        for i in 0x4000 ...  0x4010 {
            this.apu.write(i - 0x4000, 0);
        }
        this.apu.write(0x0015, 0);
        this.apu.write(0x0017, 0);
    }

    public function reset() using implicit this {
        printf("NES: reset\n");
        this.cpu.pc = (this.mapper.read(0xfffd) as Uint16 << 8) | this.mapper.read(0xfffc);
        this.apu.write(0x0015, 0);
        this.apu.write(0x0017, this.apu.read(0x0017));
        this.cpu.id = true;
    }

    public function runFrame(rate: Float) using implicit this {
        this.apu.startFrame(rate);
        this.cpu.runFrame();
    }

    public function read(addr: Uint16): Uint8 using implicit this {
        if addr < 0x2000 {
            // RAM
            return this.ram[addr & 0x7ff];
        } else if addr > 0x4018 {
            // cartridge space
            return this.mapper.read(addr);
        } else if addr < 0x4000 {
            // ppu, mirrored 7 bytes of io registers
            return this.ppu.regRead(addr & 7);
        } else if addr == 0x4016 || addr == 0x4017 {
            // controller read
            var port = addr - 0x4016;
            return if this.controllers[port].active then this.controllers[port].pop() else 0;
        } else if addr >= 0x4000 && addr <= 0x4018 {
            // APU registers
            return this.apu.read(addr);
        } else {
            // TODO: bad address
            return 0;
        }
    }

    public function write(addr: Uint16, data: Uint8) using implicit this {
        if addr < 0x2000 {
            // write to RAM (mirrored)
            this.ram[addr & 0x7ff] = data;
        } else if addr > 0x4018 {
            // cartridge space
            this.mapper.write(addr, data);
        } else if addr < 0x4000 {
            // ppu, mirrored 7 bytes of io registers
            this.ppu.regWrite(addr & 7, data);
        } else if addr == 0x4014 {
            // sprite DMA
            this.ppu.dma(data);
            this.cpu.dmaCounter = 2;
        } else if addr == 0x4016 {
            // controller latch
            if this.controllers[0].active {
                this.controllers[0].latch();
            }
            if this.controllers[1].active {
                this.controllers[1].latch();
            }
        } else if addr >= 0x4000 && addr <= 0x4018 {
            this.apu.write(addr, data);
        }
    }
}
