include "SDL2/SDL.h";

import kit.sys.utils;
import neskit.apu;
import neskit.controller;
import neskit.nes;
import neskit.palette;
import neskit.ppu;
import neskit.rom;

function main(argc: Int, argv: CArray[CString]) {
    Palette.init();

    // OpCode.decodeBytes();
    if argc < 2 {
        printf("usage: %s ROM.nes\n", argv[0]);
        exit(1);
    }

    // read rom
    var nes = Nes.new();
    nes.loadRom(argv[1]);
    nes.init();

    nes.controllers[0].active = true;

    SDL_Init(${SDL_INIT_VIDEO: Int} | ${SDL_INIT_AUDIO: Int});

    var window = SDL_CreateWindow(
        "neskit",
        ${SDL_WINDOWPOS_UNDEFINED: Int},
        ${SDL_WINDOWPOS_UNDEFINED: Int},
        512, 488,
        ${SDL_WINDOW_RESIZABLE: Int}
    );
    var renderer = SDL_CreateRenderer(window, -1, ${SDL_RENDERER_ACCELERATED: Int});
    SDL_RenderSetLogicalSize(renderer, 256, 244);
    var texture = SDL_CreateTexture(
        renderer,
        ${SDL_PIXELFORMAT_ARGB8888: Int},
        ${SDL_TEXTUREACCESS_STATIC: Int},
        256, 244
    );

    var audioSpec: SDL_AudioSpec;
    audioSpec.freq = 48000;
    audioSpec.format = ${AUDIO_F32: Int};
    audioSpec.channels = 1;
    audioSpec.samples = 0x400;
    // audioSpec.callback = fillSoundBuffer;
    var audioDevice = SDL_OpenAudioDevice(null, 0, audioSpec, audioSpec, 0);
    if audioDevice == 0 {
        printf("couldn't start audio");
        exit(1);
    }
    SDL_PauseAudioDevice(audioDevice, 0);

    var frameTime = 1_f32 / 60;
    var event: SDL_Event;
    var running: Bool = true;
    var lastRate: Float = 1_f32;
    var lastStart = 0;
    while running {
        var start = time();
        lastRate = 1;//if lastStart == 0 then 1 else frameTime / (start - lastStart);
        lastStart = start;

        nes.runFrame(lastRate);
        SDL_RenderClear(renderer);
        SDL_UpdateTexture(texture, null, nes.ppu.pixels, 256 * (sizeof Uint32));
        SDL_RenderCopy(renderer, texture, null, null);
        SDL_RenderPresent(renderer);

        // printf("* * *");
        // for i in 0 ... 256 {
        //     if i % 16 == 0 {
        //         for j in 0 ... 244 {
        //             if j % 16 == 0 {
        //                 printf("%.6x ", nes.ppu.pixels[j * 256 + i]);
        //             }
        //         }
        //         printf("\n");
        //     }
        // }

        if nes.apu.buffer.length > 0 {
            var queued = SDL_GetQueuedAudioSize(audioDevice);
            if queued < 0x4000 {
                SDL_QueueAudio(audioDevice, &nes.apu.buffer.data as Ptr[Void] as Ptr[Uint8], nes.apu.buffer.length * sizeof Float);
            }
            nes.apu.buffer.clear();
        }

        while SDL_PollEvent(&event) != 0 {
            match event.type {
                ${SDL_QUIT: Int} => {
                    running = false;
                }
                ${SDL_KEYUP: Int} => {
                    nes.controllers[0].clear(keyBinding(event.key.keysym.sym));
                }
                ${SDL_KEYDOWN: Int} => {
                    nes.controllers[0].press(keyBinding(event.key.keysym.sym));
                }
            }
        }

        if running {
            var elapsed: Double;
            // printf("frame elapsed time ms: %f\n", elapsed);
            do {
                elapsed = time() - lastStart;
                if frameTime - elapsed > 0.01 {
                    sleep(frameTime - elapsed);
                }
            } while elapsed < frameTime;
        }
    }

    printf("ended main loop\n");

    SDL_CloseAudioDevice(audioDevice);
    printf("closed audio device\n");
    SDL_DestroyTexture(texture);
    printf("destroyed texture\n");
    SDL_DestroyRenderer(renderer);
    printf("destroyed renderer\n");
    SDL_DestroyWindow(window);
    printf("destroyed window\n");
    SDL_Quit();

    printf("bye!\n");
}

function keyBinding(id: Uint8) {
    match id {
        ${SDLK_w: Int} => return NesController.Up;
        ${SDLK_a: Int} => return NesController.Left;
        ${SDLK_s: Int} => return NesController.Down;
        ${SDLK_d: Int} => return NesController.Right;
        ${SDLK_k: Int} => return NesController.B;
        ${SDLK_l: Int} => return NesController.A;
        ${SDLK_RETURN: Int} => return NesController.Start;
        ${SDLK_BACKSLASH: Int} => return NesController.Select;
    }
}

/*function fillSoundBuffer(_apu: Ptr[Void], out: Ptr[Uint8], count: Int) {
    var apu: Ptr[Apu] = _apu;
    var floats: Ptr[Float] = out;
    for i in 0 ... count / (sizeof Float) {
        var sample = apu.buffer.pop();
        floats[i] = sample;
    }
}*/
